# -*- coding: utf-8 -*-
"""5_Волновое_уравнение.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EZ5NIycKvv3f2BipzSUDonoszmRTRuk3
"""

import numpy as np
import matplotlib.pyplot as plt

h = 0.05
tau = 0.05
T = 1.0
a, b = 0.0, 1.0
Nx = int((b - a) / h)
Nt = int(T / tau)

x = np.linspace(a, b, Nx+1)
t = np.linspace(0, T, Nt+1)

u = np.zeros((Nx+1, Nt+1))

u[:, 0] = 2 * np.cos(x)
u[:, 1] = u[:, 0] + tau * 2 * np.sin(x)
u_xx0 = (u[2:, 0] - 2*u[1:-1, 0] + u[:-2, 0]) / h**2
u[1:-1, 1] += 0.5 * tau**2 * (0.5 * (u_xx0 - 2 * np.cos(-x[1:-1])))

u[0, 1] = (4*h*(np.cos(tau) - np.sin(tau)) + 4*u[1, 1] - u[2, 1]) / (3 + 2*h)
u[-1, 1] = 2 * np.cos(1 - tau)

for n in range(1, Nt):
    tn = t[n]
    uxxt = (u[2:, n] - 2*u[1:-1, n] + u[:-2, n]) / h**2
    u[1:-1, n+1] = (2*u[1:-1, n] - u[1:-1, n-1]
                    + (tau**2/2)*(uxxt - 2*np.cos(tn - x[1:-1])))
    u[0, n+1] = (4*h*(np.cos(t[n+1]) - np.sin(t[n+1]))
                 + 4*u[1, n+1] - u[2, n+1]) / (3 + 2*h)
    u[-1, n+1] = 2 * np.cos(1 - t[n+1])

u_num = u[:, -1]
u_ex = 2 * np.cos(t[-1] - x)
tau_p = float(input('Задайте шаг расчета: '))
T_p = float(input('Задайте значение окончания расчета: '))
plt.plot(x, u_num, label='Численное')
plt.plot(x, u_ex, '--', label='Точное')
plt.xlabel('x')
plt.ylabel('u(x, T)')
plt.legend()
plt.grid()
plt.show()


h = 0.05
a, b = 0.0, 1.0



Nx = int((b - a) / h)
Nt = int(T_p / tau_p)

x = np.linspace(a, b, Nx+1)
t = np.linspace(0, T_p, Nt+1)
u = np.zeros((Nx+1, Nt+1))

u[:, 0] = 2 * np.cos(x)
u[:, 1] = u[:, 0] + tau_p * 2 * np.sin(x)
u_xx0 = (u[2:, 0] - 2*u[1:-1, 0] + u[:-2, 0]) / h**2
u[1:-1, 1] += 0.5 * tau_p**2 * (0.5 * (u_xx0 - 2 * np.cos(-x[1:-1])))

u[0, 1] = (4*h*(np.cos(tau_p) - np.sin(tau_p)) + 4*u[1, 1] - u[2, 1]) / (3 + 2*h)
u[-1, 1] = 2 * np.cos(1 - tau_p)

for n in range(1, Nt):
    tn = t[n]
    uxxt = (u[2:, n] - 2*u[1:-1, n] + u[:-2, n]) / h**2
    u[1:-1, n+1] = (2*u[1:-1, n] - u[1:-1, n-1]
                    + (tau_p**2/2)*(uxxt - 2*np.cos(tn - x[1:-1])))
    u[0, n+1] = (4*h*(np.cos(t[n+1]) - np.sin(t[n+1]))
                 + 4*u[1, n+1] - u[2, n+1]) / (3 + 2*h)
    u[-1, n+1] = 2 * np.cos(1 - t[n+1])

u_num = u[:, -1]
u_ex = 2 * np.cos(t[-1] - x)

plt.plot(x, u_num, label='Численное')
plt.plot(x, u_ex, '--', label='Точное')
plt.xlabel('x')
plt.ylabel('u(x, T)')
plt.legend()
plt.grid()
plt.show()

import numpy as np
import matplotlib.pyplot as plt

def solve_wave(h, τ, T):
    a, b = 0.0, 1.0
    Nx = int((b - a)/h)
    Nt = int(T/τ)
    x = np.linspace(a, b, Nx+1)
    t = np.linspace(0, T, Nt+1)
    u = np.zeros((Nx+1, Nt+1))
    u[:, 0] = 2*np.cos(x)
    u[:, 1] = u[:, 0] + τ*2*np.sin(x)
    u_xx0 = (u[2:,0] - 2*u[1:-1,0] + u[:-2,0]) / h**2
    u[1:-1,1] += 0.5*τ**2*(0.5*(u_xx0 - 2*np.cos(-x[1:-1])))
    u[0,1] = (4*h*(np.cos(τ)-np.sin(τ)) + 4*u[1,1] - u[2,1])/(3+2*h)
    u[-1,1] = 2*np.cos(1-τ)
    for n in range(1, Nt):
        tn = t[n]
        uxxt = (u[2:,n] - 2*u[1:-1,n] + u[:-2,n]) / h**2
        u[1:-1,n+1] = 2*u[1:-1,n] - u[1:-1,n-1] + (τ**2/2)*(uxxt - 2*np.cos(tn - x[1:-1]))
        u[0,n+1] = (4*h*(np.cos(t[n+1]) - np.sin(t[n+1])) + 4*u[1,n+1] - u[2,n+1])/(3+2*h)
        u[-1,n+1] = 2*np.cos(1 - t[n+1])
    return x, t, u

h = 0.05
τ = 0.02
T = 2.0

x, t, u = solve_wave(h, τ, T)

plt.plot(x, u[:, -1], label='Численное')
plt.plot(x, 2*np.cos(T - x), '--', label='Точное')
plt.xlabel('x')
plt.ylabel('u(x, T)')
plt.legend()
plt.grid()
plt.show()